/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package clientchatapplication;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Collection;
import java.util.Hashtable;
import java.util.Iterator;

/**
 *
 * @author Andrey
 */
public class ClientApplication extends javax.swing.JFrame {

    /**
     * Creates new form ClientApplication
     */
    public ClientApplication() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        listClients = new java.awt.List();
        jTextInput = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextOutput = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Client Chat");

        listClients.setMultipleMode(true);

        jTextInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextInputKeyReleased(evt);
            }
        });

        jTextOutput.setColumns(20);
        jTextOutput.setRows(5);
        jScrollPane1.setViewportView(jTextOutput);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(listClients, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE))
                    .addComponent(listClients, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE))
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextInputKeyReleased
        // TODO add your handling code here:
        //jTextOutput.setText(evt.getKeyCode() + "  " + evt.getKeyChar());
        if (evt.getKeyCode() == 10) {//Enter
            jTextOutput.append(jTextInput.getText() + "\r\n");
            if (jTextInput.getText().equalsIgnoreCase("cls")) {
                jTextOutput.setText("");
            }
            else{
                String[] selectedClients = listClients.getSelectedItems();
                for (int i=0; i<selectedClients.length;i++){
                    out.println("<<" + selectedClients[i] + ">>" + jTextInput.getText());
                }
                out.println("COUNTING" + selectedClients.length);
                out.println(jTextInput.getText());
                
                
            }
            jTextInput.setText("");
        }

        //if (evt.getKeyCode() == )
    }//GEN-LAST:event_jTextInputKeyReleased

    
    private static BufferedReader stdIn = new BufferedReader(new InputStreamReader(System.in));
    private static Hashtable<Thread, Socket> map = new Hashtable<>();
    private Hashtable<String, PrintWriter> clientsOutput = new Hashtable<>();
    
    private static int port = 4444;//2001; /* port to connect to */
    private static String host = "localhost"; /* host to connect to */
    private static Socket server = null;
    private static PrintWriter out;
    private static boolean TERMINATE_CLIENT = false;
    
    
    public static ClientApplication clientApp;
    /**
     * @param args the command line arguments
     */
    
    
    
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                clientApp = new ClientApplication();
                clientApp.setVisible(true);
                
            }
        });
        
        try {
            server = new Socket(host, port);
        } catch (UnknownHostException e) {
            System.err.println(e);
            System.exit(1);
        }
        out = new PrintWriter(server.getOutputStream(), true);
        
        Thread t = new Thread(new ServerConn(server));
        t.start();
        //out.println("<<REFRESH>>");
        
        
        
    }
    
    public void printMsgOnScreen(String msg){
        jTextOutput.setText(jTextOutput.getText() + msg + "\r\n");
    }
    
    public void addClientToList(String name){
        listClients.add(name);
    }
    
    public void remClientFromList(String name){
        listClients.remove(name);
    }
    
    
    
    public static void exitApp(){
        TERMINATE_CLIENT = true;
        System.exit(0);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextInput;
    private javax.swing.JTextArea jTextOutput;
    private java.awt.List listClients;
    // End of variables declaration//GEN-END:variables
}
